//
//  memory-tests.cpp
//
//  Created by Ilia Shoshin on 28.09.24.
//

#include <systemc>
#include <gtest/gtest.h>

#include "modules.hpp"
#include "memory.hpp"

using namespace sc_core;
using namespace sim;

static constexpr size_t MemorySize = 65536;    // 64 KB

class MemoryTest final {
    Memory<MemorySize> memory {"Memory"};
public:
    // Signal declarations
    sc_core::sc_signal<sc_dt::sc_uint<16>> address;
    sc_core::sc_signal<sc_dt::sc_uint<8>> dataIn;
    sc_core::sc_signal<sc_dt::sc_uint<8>> dataOut;
    sc_core::sc_signal<bool> read;
    sc_core::sc_signal<bool> write;

    MemoryTest() {
        // Bind signals to Memory ports
        memory.address(address);
        memory.dataIn(dataIn);
        memory.dataOut(dataOut);
        memory.read(read);
        memory.write(write);
    }

    void load(const std::array<uint8_t, MemorySize>& data) {
        memory.load(data);
    }
};

// We need to create all modules and set all signals before starting any simulations.
static modules::add<MemoryTest> gALU;

TEST(MemoryTests, ReadWriteTest) {
    auto mem = modules::get<MemoryTest>();

    // Write to memory
    mem->address.write(0x05);
    mem->dataIn.write(0xFF);
    mem->write.write(true);
    sc_start(1, SC_NS); // Trigger write
    mem->write.write(false); // Reset write signal

    // Read from memory
    mem->address.write(0x05);
    mem->read.write(true);
    sc_start(1, SC_NS); // Trigger read

    EXPECT_EQ(mem->dataOut.read(), 0xFF); // Check that the value read is correct
    mem->read.write(false); // Reset read signal
}

TEST(MemoryTests, LoadDataTest) {
    auto mem = modules::get<MemoryTest>();
    std::array<uint8_t, MemorySize> data = {
        // 256 zeros (reserved)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        // Program bytes
        0x3E, 0x05,       // MVI A, 5
        0x32, 0x00, 0x10, // STA 1000h
        0x06, 0x03,       // MVI B, 3
        0x80,             // ADD A
        0x76              // HLT
    };
    mem->load(data);
    // Check if the program was loaded correctly
    mem->read.write(true);

    for (size_t i = 0; i < data.size(); ++i) {
        mem->address.write(i);
        sc_start(1, SC_NS); // Trigger read
        EXPECT_EQ(mem->dataOut.read().to_uint(), data[i]);
    }
    mem->read.write(false);
}